ABSOLUTE (statement) is used to access computer interrupt registers.
ACCESS (file statement) sets the read and write access of a file when opened.
ALIAS (QB64 DECLARE LIBRARY statement) denotes the actual name of an imported FUNCTION or SUB procedure.
AND (boolean) conditonal operator is used to include another evaluation in an IF...THEN or Boolean statement.
AND (logical operator) is used to compare two numerical values bitwise.
ANY (variable type) disables type checking for a variable used in a SUB or FUNCTION declaration.
APPEND (file mode) creates a new file or allows an existing file to have data added using WRITE or PRINT
ASC (function) returns the ASCII code number of a text string character.
ASC (statement) (QB64 only) sets the code value of an ASCII text character at a designated string position.
AS is used to denote a variable type or file number.
_AUTODISPLAY (statement) enables the automatic display of the screen image changes previously disabled by _DISPLAY.
BEEP (statement) creates an error sound of a fixed duration.
BINARY (file mode) creates or opens an existing file for read and write byte-wise access.
_BLEND (function) returns -1 if enabled or 0 if disabled by _DONTBLEND statement.
_BLEND (statement) statement turns on 32 bit alpha blending for the current image or screen mode and is default.
BLOAD (statement) transfers the contents of a BINARY BSAVE file to a specific array.
BSAVE (statement) transfers the contents of an array to a specified size BINARY file.
BYVAL (statement) assigns a numerical variable value by its value, not the name. 
CALLS (non-BASIC call statement)
CALL (statement) optional statement that sends the program to a SUB procedure. Requires parameters be enclosed in brackets(parenthesis).
CDECL (DECLARE (non-BASIC statement))
CHAIN (statement) sends a program to another specified program module or compiled program.
CHDIR (statement) changes the current program path for file access.
$CHECKING (QB64 C++ Metacommand) turns event error checking OFF or ON. Do not comment or REM.
CIRCLE (statement) creates a circle, ellipse or arc at a designated graphical coordinate position.
_CLEARCOLOR (function) returns the current transparent color of an image.
_CLEARCOLOR (statement) sets a specific color index of an image to be transparent
CLEAR (statement) sets all variable and array values to zero number values or empty STRINGs.
_CLIPBOARD$ (function) returns the operating system's clipboard contents as a STRING.
_CLIPBOARD$ (statement) sets and overwrites the STRING value in the operating system's clipboard.
_CLIP (PUT graphics option) allows placement of an image partially off of the screen.
CLOSE (statement) closes specific file number(s) or all files when a number is not specified.
CLS (statement) clears a program screen, VIEW port or WINDOW.
COLOR (statement) sets the current text foreground and/or background color to be used.
COMMON (statement) sets a variable name as shared by CHAINed program modules.
$CONSOLE (QB64 Metacommand) creates a console window that can be used throughout a program. Do not comment!
_CONSOLE (statement) used to turn a console window OFF or ON or to designate _DEST _CONSOLE for output.
_CONSOLETITLE (statement) creates the title of the console window using a literal or variable string.
CONST (statement) sets a variable name and its value as a constant value to be used by all procedures.
_CONTROLCHR (function) returns the current state of _CONTROLCHR as 1 when OFF and 0 when ON.
_CONTROLCHR (statement) OFF allows the control characters to be used as text characters. ON(default) can use them as commands.
_COPYPALETTE (statement) copies the color palette intensities from one 4 or 8 BPP image to another image.
DATA (statement) creates a line of fixed program information separated by commas.
DATE$ (function) returns the present Operating System date string formatted as mm-dd-yyyy.
DATE$ (statement) sets the date of the Operating System using a mm-dd-yyyy string format.
DECLARE (BASIC statement) declares a SUB or FUNCTION procedure at the start of a program. Not required in QB64.
DECLARE CUSTOMTYPE LIBRARY
DECLARE DYNAMIC LIBRARY (QB64 statement) declares DYNAMIC, CUSTOMTYPE or STATIC library(DLL) SUB or FUNCTION.
DECLARE LIBRARY (QB64 statement block) declares a C++, SDL or Operating System SUB or FUNCTION to be used.
DECLARE STATIC LIBRARY
DEF FN (statement) defines a function procedure in the main program that cannot be used recursively.
DEF SEG (statement) defines a segment in memory to be accessed by a memory procedure.
_DELAY (statement) suspends program execution for a SINGLE number of seconds.
_DEPTHBUFFER (statement) enables, disables, locks or clears depth buffering in GL.
_DEST (function) returns the current destination screen page or image handle value.
_DEST (statement) sets the current write image or SCREEN page destination for prints or graphics.
DIM (statement) defines a variable as a specified type and can size a STATIC array.
_DISPLAY (function) returns the handle of the current image that is displayed on the screen.
_DISPLAYORDER (GL statement) designates the order to render software, hardware and custom-opengl-code.
_DISPLAY (statement) turns off the automatic display while only displaying the screen changes when called.
_DONTBLEND (statement) statement turns off default _BLEND 32 bit alpha blending for the current image or screen.
_DONTWAIT (SHELL action) specifies that the program should not wait until the shelled command/program is finished. 
DRAW (statement) uses a special string format that draws graphical lines in specific directions.
$ELSEIF (QB64 GL Pre-Compiler Metacommand) used in conjunction with $IF for the precompiler. Do not comment or REM.
$ELSE (QB64 GL Pre-Compiler Metacommand) used in conjunction with $IF for the precompiler. Do not comment or REM.
$END IF (QB64 GL Pre-Compiler Metacommand) used in conjunction with $IF for the precompiler. Do not comment or REM.
END (statement) sets the end of a program, sub-procedure, statement block, DECLARE LIBRARY or TYPE definition.
ENVIRON (statement) temporarily sets or changes an environmental string value.
EQV (logic operator) is used to compare two numerical values bitwise.
ERASE (statement) clears the values from $STATIC arrays and completely removes $DYNAMIC arrays.
ERROR (statement) sets a specific ERROR code to be simulated.
$EXEICON (QB64 GL Pre-Compiler Metacommand) {{text|used with an ICOn file name to embed the image into the QB64 executable.
FIELD (statement) defines the variable sizes to be written or read from a file.
FILES (statement) returns a list of files in the current directory path to the SCREEN.
_FONT (function) creates a new font handle from a designated image handle.
_FONT (statement) sets the current font handle to be used by PRINT or _PRINTSTRING.
_FREEFONT (statement) releases the current font handle from memory.
_FREEIMAGE (statement) releases a designated image handle from memory.
FREE (QB64 TIMER statement) frees a numbered TIMER event in QB64 only.
_FREETIMER (function) returns an unused timer number value to use with ON TIMER (n).
_FULLSCREEN (function) returns the fullscreen mode in use by the program. 
_FULLSCREEN (statement) sets the program window to full screen or OFF. Alt + Enter does it manually.
FUNCTION (procedure block) sub-procedure that can calculate and return one value to a program in its name. 
GET (file statement) reads a file sequencially or at a specific position and returns the value as the variable type used.
GET (graphics statement) maps an area the current screen's video information and places it in an INTEGER array.
GET (QB64 TCP/IP statement) reads a connection port to return a value.
GOSUB (statement) sends the program to a designated line label procedure in the main program.
GOTO (statement) sends the program to a designated line number or line label in a procedure. 
_HIDE (SHELL action) hides the command line display during a shell.
_ICON (statement) designates a _LOADIMAGE image file handle to be used as the program's icon. (Icons can be used in GL only!)
$IF (QB64 GL Pre-Compiler Metacommand) used to set an IF condition for the precompiler. Do not comment or REM.
IMP (logic operator) is used to compare two numerical values bitwise.
$INCLUDE (Metacommand) designates a text code library file to include with the program.
INPUT (file mode) OPEN statement that only allows an existing file to be read using INPUT (file statement) or INPUT$.
INPUT (file statement) reads a file sequentially using the variable types designated.
_KEYCLEAR (function) clears the keyboard buffers for INKEY$, _KEYHIT, and INP.
KEY LIST (statement) lists the 12 Function key soft key string assignments going down left side of screen.
KEY n (statement) used with ON KEY(n) events to assign a "softkey" string to a key or create a user defined key.
KEY(n) (statement) used with ON KEY(n) events to assign, enable, disable or suspend event trapping.
KILL (statement) deletes the specified file without a warning. Remove empty folders with RMDIR. 
$LET (QB64 Pre-Compiler Metacommand) used to set a flag variable for the precompiler. Do not comment or REM.
LET (statement) assigns a variable a literal value. Not required!
_LIMIT (statement) sets the loops per second rate to slow down loops and limit CPU usage.
LINE INPUT (file statement) returns an entire text file line and returns it as a STRING value.
LINE INPUT (statement) user input can be any text character including commas and quotes as a STRING value only.
LINE (statement) creates a graphic line or box on the SCREEN.
LIST displays the current ON KEY(n) function key(F1 to F10) "soft key" settings.
LOCATE (statement) sets the text cursor's row and column position for a PRINT or INPUT statement.
LOCK (statement) restricts access to portions or all of a file by other programs or processes.
LPRINT (statement) sends STRING data to the default LPT or USB printer.
LPRINT USING (statement) sends template formatted text to the default LPT or USB printer.
LSET (statement) left justifies the text in a string so that there are no leading spaces.
_MAPTRIANGLE (statement) maps a triangular image source area to put on a destination area.
_MAPUNICODE (function) returns the Unicode(UTF32) code point value of a mapped ASCII character code.
_MAPUNICODE (statement) maps a Unicode value to an ASCII code number.
_MEMCOPY (statement) copies a value from a designated OFFSET and SIZE TO a block of memory at a designated OFFSET.
_MEMFILL (statement) fills a designated memory block OFFSET with a certain SIZE and TYPE of value.
_MEMFREE (statement) frees a designated memory block in a program. Only free memory blocks once!
_MEM (function) returns _MEM block referring to the largest continuous memory region beginning at a designated variable's offset.
_MEMGET (function) returns a value from a designated memory block and OFFSET using a designated variable TYPE.
_MEMGET (statement) reads a value from a designated memory block at a designated OFFSET
_MEMPUT (statement) places a designated value into a designated memory block OFFSET
_MEM (variable type) contains read only dot elements for the OFFSET, SIZE, TYPE and ELEMENTSIZE of a block of memory.
_MIDDLE(_SCREENMOVE option) centers the program window on the desktop in any screen resolution.
MID$ (function) returns a designated portion of a STRING.
MID$ (statement) redefines existing characters in a STRING.
MKDIR (statement) creates a new folder in the current or designated program path.
MOD (math operator) performs integer remainder division on a numerical value. 
_MOUSEHIDE (statement) hides the mouse pointer from view
_MOUSEMOVE (statement) moves the mouse pointer to a designated position on the program SCREEN.
_MOUSESHOW (statement) displays the mouse cursor after it has been hidden or can change the cursor shape in GL.
NAME (statement) names an existing file name AS a new file name.
NOT (logical operator) inverts the value of a logic operation or returns True when a boolean evaluation is False. 
OFF (event statement) turns off all ON event checking.
_OFFSET (function) returns the memory offset of a variable when used with DECLARE LIBRARY or _MEM only.
ON COM(n) (statement) sets up a COM port event procedure call.
ON ERROR (statement) sets up and activates an error event checking procedure call. Use to avoid program errors.
ON...GOSUB (statement) sets up a numberical event procedure call.
ON...GOTO (statement) sets up a numberical event procedure call.
ON KEY(n) (statement) sets up a keyboard key entry event procedure.
ON PEN (statement) sets up a pen event procedure call.
ON PLAY(n) (statement) sets up a PLAY event procedure call.
ON STRIG(n) (statement) sets up a joystick button event procedure call.
ON TIMER(n) (statement) sets up a timed event procedure call.
ON UEVENT (statement) Currently NOT supported in QB64!
OPEN COM (statement) opens a serial communication port for access at a certain speed and mode.
OPEN (file statement) opens a file name for an access mode with a specific file number.
OR (boolean) conditonal operator is used to include an alternative evaluation in an IF...THEN or Boolean statement.
OR (logic operator) is used to compare two numerical values bitwise.
OUTPUT (file mode) creates a new file or clears all data from an existing file to acess the file sequencially. 
OUT (statement) writes numerical data to a specified register port.
PAINT (statement) fills an enclosed area of a graphics screen with a color until it encounters a specific colored border.
_PALETTECOLOR (function) return the 32 bit attribute color setting of an image or screen page handle's palette.
_PALETTECOLOR (statement) sets the color value of a palette entry of an image using 256 colors or less palette modes.
PALETTE (statement) sets the Red, Green and Blue color attribute intensities using a RGB multiplier calculation.
PALETTE USING (statement) sets the color intensity settings using a designated array.
PCOPY (statement) swaps two designated memory page images when page swapping is enabled in the SCREEN statement.
PEN (statement) enables/disables or suspends event trapping of a lightpen device.
PLAY(n) (function) returns the number of notes currently in the background music queue.
PLAY (statement) uses a special string format that can produce musical tones and effects.
POKE (statement) writes a numerical value to a specified segment address in memory.
_PRESERVE (REDIM action) preserves the data presently in an array when REDIM is used.
PRESET (statement) sets a pixel coordinate to the background color unless one is specified.
PRINT (file statement) prints text strings or numerical values to a file.
_PRINTIMAGE (statement) sends an image to the printer that is stretched to the current printer paper size.
_PRINTMODE (function) returns the present _PRINTMODE value number.
_PRINTMODE (statement) sets the text or _FONT printing mode on a background when using PRINT or _PRINTSTRING.
PRINT (QB64 TCP/IP statement) sends text strings to a connection handle.
PRINT (statement) prints text strings or numerical values to the SCREEN.
_PRINTSTRING (statement) locates and prints a text string using graphic coordinates.
PRINT USING (file statement) prints a template formatted string to a file.
PRINT USING (statement) prints a template formatted string to the SCREEN.
PSET (statement) sets a pixel coordinate to the current color unless a color is designated.
PUT (file I/O statement) writes data sequencially or to a designated position using a variable value.
PUT (graphics statement) places pixel data stored in an INTEGER array to a specified area of the SCREEN. 
_PUTIMAGE (statement) maps a rectangular image source area to an image destination area. 
PUT (QB64 TCP/IP statement) sends raw data to a user's connection handle.
RANDOM (file mode) creates a file or opens an existing file to read and write records of a set byte size.
RANDOMIZE (statement) sets the random seed value for a specific sequence of random RND values.
RANDOMIZE USING (QB64 statement) restarts the designated seed value's random sequence of values from the beginning.
READ (statement) reads values from a DATA field. ACCESS READ is used with the OPEN statement.
REDIM (statement) creates a new dynamic array or resizes one without losing data when _PRESERVE is used.
REM (statement) or an apostrophe tells the program to ignore statements following it on the same line.
RESET (statement) closes all files and writes the directory information to a diskette before it is removed from a disk drive.
_RESIZE (function) returns -1 when a program user wants to resize the GL program screen.
$RESIZE (Metacommand) used with ON allows a user to resize the GL program window where OFF does not. Do not comment!
_RESIZE (statement) sets resizing of the window ON or OFF and sets the method as _STRETCH or _SMOOTH.
RESTORE (statement) resets the DATA pointer to the start of a designated field of data.
RESUME (statement) an error handling procedure exit that can send the program to a line number or the NEXT code line.
RETURN (statement) returns the program to the code immediately following a GOSUB call.
RMDIR (statement) removes an empty folder from the current path or the one designated.
RSET (statement) right justifies a string value so that any end spaces are moved to the beginning.
RUN (statement) clears and restarts the program currently in memory or executes another specified program. 
_SCREENCLICK (statement) simulates clicking on a point on the desktop screen with the left mouse button.
SCREEN (function) can return the ASCII character code or color of the text at a text designated coordinate.
$SCREENHIDE (QB64 Metacommand) hides the program window from view. Do not comment!
_SCREENHIDE (statement) hides the program window from view.
_SCREENICON (function) returns -1 or 0 to indicate if the window has been minimized to an icon on the taskbar.
_SCREENICON (statement) minimizes the program window to an icon on the taskbar.
_SCREENMOVE (statement) positions program window on the desktop using designated coordinates or the _MIDDLE option.
_SCREENPRINT (statement) simulates typing text into a Windows program using the keyboard.
$SCREENSHOW (QB64 Metacommand) displays that program window after it was hidden by $SCREENHIDE. Do not comment!
_SCREENSHOW (statement) displays the program window after it has been hidden by _SCREENHIDE.
SCREEN (statement) sets the display mode and size of the program window.
SEEK (function) returns the present byte position in an opened file.
SEEK (statement) moves to a specified position in an opened file.
_SETALPHA (statement) sets the alpha channel transparency level of some or all of the pixels of an image.
SHARED (statement) designates that a variable can be used by other procedures or the main procedure when in a sub-procedure.
SHELL (QB64 function) executes a DOS command or calls another program. Returns codes sent by END or SYSTEM.
SHELL (statement) sends STRING commands to the DOS command line. SHELL calls will not affect the current path.
SIGNAL (OS 2 event)
SLEEP (statement) pauses the program for a designated number of seconds or until a key is pressed.
_SNDBAL (statement) attempts to set the balance or 3D position of a sound file with the SYNC capability.
_SNDCLOSE (statement) frees and unloads an open sound using the sound handle created by _SNDOPEN.
_SNDLIMIT (statement) stops playing a sound after it has been playing for a set number of seconds.
_SNDLOOP (statement) plays a sound repeatedly until _SNDSTOP is used.
_SNDPAUSE (statement) stops playing a sound file that has the PAUSE capability until resumed.
_SNDPLAYCOPY (statement) copies a sound handle, plays it and automatically closes the copy when done.
_SNDPLAYFILE (statement) directly plays a designated sound file.
_SNDPLAY (statement) plays a sound file handle that was created by _SNDOPEN or _SNDCOPY.
_SNDRAWDONE (GL statement) pads a _SNDRAW stream so the final (partially filled) buffer section is played.
_SNDRAW (statement) creates mono or stereo sounds from calculated wave frequency values.
_SNDSETPOS (statement) sets the playing position of a sound handle.
_SNDSTOP (statement) stops playing a sound handle.
_SNDVOL (statement) sets the volume of a sound file handle that has the VOL capability.
SOUND (statement) creates a sound of a specified frequency and duration.
_SOURCE (function) returns the present source image handle value.
_SOURCE (statement) sets the source image handle.
STATIC (statement) creates a SUB or FUNCTION variable that retains its value.
STOP (statement) stops a program when troubleshooting or stops an ON event.
STRIG(n) (statement)
SUB (procedure block) sub-procedure that can calculate and return multiple parameter values.
SWAP (statement) swaps two string or numerical values.
SYSTEM (statement) ends a program immediately. 
TIME$ (function) returns the present time setting of the Operating System as a format hh:mm:ss STRING.
TIMER (function) returns the number of seconds since midnight as a SINGLE value.
TIMER (statement) events based on the designated time interval and timer number.
TIME$ (statement) sets the OS time using the hh:mm:ss STRING format.
_TITLE (statement) sets the program title string value. 
TO indicates a range of numerical values or an assignment of one value to another.
TROFF (statement)
TRON (statement)
TYPE (definition) defines a variable type or file record that can include any STRING or numerical types. 
UNLOCK (statement) unlocks a designated file or portions of it.
VIEW (graphics statement) sets up a graphic view port area of the screen.
VIEW PRINT (statement) sets up a text viewport area of the screen.
WAIT (statement) waits until a vertical retrace is started or a screen draw ends.
WIDTH (statement) sets the text column and row sizes in several SCREEN modes.
WINDOW (statement) maps a window size different from the program's window size.
WRITE (file statement) writes data to a file with each variable value separated by commas. 
WRITE (screen I/O statement) prints variable values to the screen with commas separating each value.
XOR (logic operator) is used to compare two numerical values bitwise. 
