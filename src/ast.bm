deflng a-z

function ast_add_constant(c$)
    if ast_last_constant = ubound(ast_constants) then ast_expand_constants_array
    ast_last_constant = ast_last_constant + 1
    ast_constants(ast_last_constant) = c$
    ast_add_constant = ast_last_constant
end function
    
function ast_add_node(typ)
    if ast_last_node = ubound(ast_nodes) then ast_expand_nodes_arrays
    ast_last_node = ast_last_node + 1
    ast_nodes(ast_last_node).typ = typ
    ast_add_node = ast_last_node
end function

sub ast_attach(parent, child)
    ast_nodes(parent).num_children = ast_nodes(parent).num_children + 1
    ast_children(parent) = ast_children(parent) + mkl$(child)
end sub

sub ast_expand_nodes_arrays()
    new_size = ubound(ast_nodes) * 2
    redim _preserve ast_nodes(new_size) as ast_node_t
    redim _preserve ast_children(new_size) as string
end sub

sub ast_expand_constants_array()
    new_size = ubound(ast_constants) * 2
    redim _preserve ast_constants(new_size) as string
end sub

sub ast_dump_pretty(root)
    if ast_nodes(root).typ = 0 then
        fatalerror "Node" + str$(root) + " is invalid"
    end if
    select case ast_nodes(root).typ
    case AST_ASSIGN
        print htable_names(ast_nodes(root).ref); " = ";
        for i = 1 to len(ast_children(root)) step 4
            ast_dump_pretty cvl(mid$(ast_children(root), i, 4))
        next i
    case AST_IF
        print "IF ";
        ast_dump_pretty cvl(left$(ast_children(root), 4))
        print " THEN ";
        if ast_nodes(cvl(mid$(ast_children(root), 5, 4))).typ = AST_BLOCK then print
        ast_dump_pretty cvl(mid$(ast_children(root), 5, 4))
        if ast_nodes(cvl(mid$(ast_children(root), 5, 4))).typ = AST_BLOCK then print "END IF";
    case AST_DO_PRE
        print "DO-PRE";
    case AST_DO_POST
        print "DO-POST";
    case AST_FOR
        print "FOR";
        print htable_names(ast_nodes(root).ref);
    case AST_SELECT
        print "SELECT";
    case AST_CALL
        print "call(";
        print htable_names(ast_nodes(root).ref);
        if len(ast_children(root)) then print ", ";
        for i = 1 to len(ast_children(root)) step 4
            ast_dump_pretty cvl(mid$(ast_children(root), i, 4))
            if i + 3 < len(ast_children(root)) then print ", ";
        next i
        print ")";
    case AST_CONSTANT
        print ast_constants(ast_nodes(root).ref);
    case AST_BLOCK
        for i = 1 to len(ast_children(root)) step 4
            ast_dump_pretty cvl(mid$(ast_children(root), i, 4))
            print
        next i
    case AST_VAR
        print "var("; htable_names(ast_nodes(root).ref); ")";
    end select
end sub

sub ast_dump_constants
    print " ID    Value"
    for i = 1 to ast_last_constant
        print using "###    &"; i; ast_constants(i)
    next i
end sub
