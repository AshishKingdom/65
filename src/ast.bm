'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'ast.bm - Routines for Abstract Syntax Tree

deflng a-z

' Initialise a clean AST
sub ast_init
    redim ast_nodes(10) as ast_node_t
    redim ast_children(10) as string
    ast_last_node = 0
    redim ast_constants(10) as string
    redim ast_constant_types(10) as long
    ast_constants(AST_NONE) = "None"
    ast_constant_types(AST_NONE) = TYPE_ANY
    ast_constants(AST_FALSE) = "0"
    ast_constant_types(AST_FALSE) = TYPE_NUMERIC
    ast_constants(AST_TRUE) = "-1"
    ast_constant_types(AST_TRUE) = TYPE_NUMERIC
    ast_constants(AST_ONE) = "1"
    ast_constant_types(AST_ONE) = TYPE_NUMERIC
    ast_last_constant = 4
end sub

function ast_add_constant(token, content$, force_type)
    if ast_last_constant = ubound(ast_constants) then ast_expand_constants_array
    ast_last_constant = ast_last_constant + 1
    select case token
    case TOK_NUMINT
        ast_constants(ast_last_constant) = content$
        detected_type = type_detect_numint_type(content$)
    case TOK_NUMDEC
        ast_constants(ast_last_constant) = content$
        detected_type = type_detect_numdec_type(ast_constants(ast_last_constant))
    case TOK_NUMBASE
        ast_constants(ast_last_constant) = ltrim$(str$(val(content$)))
        detected_type = type_detect_numint_type(ast_constants(ast_last_constant))
    case TOK_NUMEXP
        ast_constants(ast_last_constant) = content$
        detected_type = type_detect_numexp_type(ast_constants(ast_last_constant))
    case TOK_STRING
        'Strip quotes
        ast_constants(ast_last_constant) = mid$(content$, 2, len(content$) - 2)
        detected_type = TYPE_STRING
    end select
    if force_type > 0 then
        'If you've used D or E, don't try and use # or ! as well!
        if token = TOK_NUMEXP or not type_can_safely_cast(detected_type, force_type) then ps_error "Cannot retype constant"
        ast_constant_types(ast_last_constant) = force_type
    else
        ast_constant_types(ast_last_constant) = detected_type
    end if
    ast_add_constant = ast_last_constant
end function
    
function ast_add_node(typ)
    if ast_last_node = ubound(ast_nodes) then ast_expand_nodes_arrays
    ast_last_node = ast_last_node + 1
    ast_nodes(ast_last_node).typ = typ
    ast_add_node = ast_last_node
end function

function ast_add_cast(expr, vartyp)
    if vartyp = type_of_expr(expr) then
        ast_add_cast = expr
        exit function
    end if
    cast_node = ast_add_node(AST_CAST)
    ast_nodes(cast_node).ref = vartyp
    ast_attach cast_node, expr
    ast_add_cast = cast_node
end function

sub ast_attach(parent, child)
    ast_nodes(parent).num_children = ast_nodes(parent).num_children + 1
    ast_children(parent) = ast_children(parent) + mkl$(child)
end sub

'Why does this function exist when there's a .num_children field on the node?
function ast_num_children(node)
    ast_num_children = len(ast_children(node)) / len(dummy&)
end function

function ast_get_child(node, index)
    ast_get_child = cvl(mid$(ast_children(node), len(dummy&) * (index - 1) + 1, len(dummy&)))
end function

sub ast_replace_child(node, index, new_child)
    mid$(ast_children(node), len(dummy&) * (index - 1) + 1, len(dummy&)) = mkl$(new_child)
end sub

sub ast_expand_nodes_arrays()
    new_size = ubound(ast_nodes) * 2
    redim _preserve ast_nodes(new_size) as ast_node_t
    redim _preserve ast_children(new_size) as string
end sub

sub ast_expand_constants_array()
    new_size = ubound(ast_constants) * 2
    redim _preserve ast_constants(new_size) as string
    redim _preserve ast_constant_types(new_size) as long
end sub
