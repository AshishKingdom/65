deflng a-z

function ast_add_constant(token, content$)
    if ast_last_constant = ubound(ast_constants) then ast_expand_constants_array
    ast_last_constant = ast_last_constant + 1
    select case token
    case TOK_NUMINT, TOK_NUMDEC
        ast_constants(ast_last_constant) = content$
        'This should probably refine the type further to something concrete
        ast_constant_types(ast_last_constant) = TYPE_NUMBER
    case TOK_NUMBASE
        ast_constants(ast_last_constant) = ltrim$(str$(val(content$)))
        ast_constant_types(ast_last_constant) = TYPE_NUMBER
    case TOK_NUMEXP
        fatalerror "No support for numbers with exponents"
    case TOK_STRING
        'Strip quotes
        ast_constants(ast_last_constant) = mid$(content$, 2, len(content$) - 2)
        ast_constant_types(ast_last_constant) = TYPE_STRING
    end select
    ast_add_constant = ast_last_constant
end function
    
function ast_add_node(typ)
    if ast_last_node = ubound(ast_nodes) then ast_expand_nodes_arrays
    ast_last_node = ast_last_node + 1
    ast_nodes(ast_last_node).typ = typ
    ast_add_node = ast_last_node
end function

sub ast_attach(parent, child)
    ast_nodes(parent).num_children = ast_nodes(parent).num_children + 1
    ast_children(parent) = ast_children(parent) + mkl$(child)
end sub

function ast_num_children(node)
    ast_num_children = len(ast_children(node)) / len(dummy&)
end function

function ast_get_child(node, index)
    ast_get_child = cvl(mid$(ast_children(node), len(dummy&) * (index - 1) + 1, len(dummy&)))
end function

sub ast_expand_nodes_arrays()
    new_size = ubound(ast_nodes) * 2
    redim _preserve ast_nodes(new_size) as ast_node_t
    redim _preserve ast_children(new_size) as string
end sub

sub ast_expand_constants_array()
    new_size = ubound(ast_constants) * 2
    redim _preserve ast_constants(new_size) as string
    redim _preserve ast_constant_types(new_size) as long
end sub

sub ast_dump_pretty(root, indent_level)
    indent$ = space$(indent_level * 4)
    if ast_nodes(root).typ = 0 then
        fatalerror "Node" + str$(root) + " is invalid"
    end if
    select case ast_nodes(root).typ
    case AST_ASSIGN
        print htable_names(ast_nodes(root).ref); " = ";
        ast_dump_pretty cvl(ast_children(root)), 0
    case AST_IF
        print "IF ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print " THEN ";
        if ast_nodes(ast_get_child(root, 2)).typ = AST_BLOCK then
            print
            ast_dump_pretty ast_get_child(root, 2), indent_level + 1
            if ast_num_children(root) > 2 then
                print indent$; "ELSE"
                ast_dump_pretty ast_get_child(root, 3), indent_level + 1
            end if
            print indent$; "END IF";
        else
            ast_dump_pretty ast_get_child(root, 2), 0
        end if
    case AST_DO_PRE
        print indent$; "DO WHILE ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print
        ast_dump_pretty ast_get_child(root, 2), indent_level + 1
        print indent$; "LOOP";
    case AST_DO_POST
        print indent$; "DO"
        ast_dump_pretty ast_get_child(root, 2), indent_level + 1
        print indent$; "LOOP WHILE ";
        ast_dump_pretty ast_get_child(root, 1), 0
    case AST_FOR
        print "FOR ";
        print htable_names(ast_nodes(root).ref); " = ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print " TO ";
        ast_dump_pretty ast_get_child(root, 2), 0
        print " STEP ";
        ast_dump_pretty ast_get_child(root, 3), 0
        print
        ast_dump_pretty ast_get_child(root,  4), indent_level + 1
        print indent$; "NEXT "; htable_names(ast_nodes(root).ref);
    case AST_SELECT
        print indent$; "SELECT";
    case AST_CALL
        print "call(";
        print htable_names(ast_nodes(root).ref);
        if len(ast_children(root)) then print ", ";
        for i = 1 to ast_num_children(root)
            ast_dump_pretty ast_get_child(root, i), 0
            if i <> ast_num_children(root) then print ", ";
        next i
        print ")";
    case AST_CONSTANT
        print ast_constants(ast_nodes(root).ref);
    case AST_BLOCK
        for i = 1 to ast_num_children(root)
            print indent$;
            ast_dump_pretty ast_get_child(root, i), indent_level
            print
        next i
    case AST_VAR
        print "var("; htable_names(ast_nodes(root).ref); ")";
    end select
end sub

sub ast_dump_constants
    print " ID    Type      Value"
    for i = 1 to ast_last_constant
        print using "###    &    &"; i; type_human_readable(ast_constant_types(i)); ast_constants(i)
    next i
end sub
