dim shared tok_direct(1 to TS_MAX)
dim sym as symtab_entry_t
sym.typ = SYM_GENERIC
sym.identifier = "|UNKNOWN"
symtab_add_entry sym
sym.identifier = "|EOF"
symtab_add_entry sym
sym.identifier = "|EOI"
symtab_add_entry sym
sym.identifier = "|NEWLINE"
symtab_add_entry sym
tok_direct(TS_NEWLINE) = 4 
sym.identifier = "|COMMA"
symtab_add_entry sym
tok_direct(TS_COMMA) = 5 
sym.identifier = "|SEMICOLON"
symtab_add_entry sym
tok_direct(TS_SEMICOLON) = 6 
sym.identifier = "REM"
symtab_add_entry sym
sym.identifier = "|LINENUM"
symtab_add_entry sym
sym.typ = SYM_INFIX
sym.v2 = 2
sym.v3 = 0
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "IMP"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v2 = 3
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "EQV"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v2 = 4
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "XOR"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v2 = 5
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "OR"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v2 = 6
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "AND"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.typ = SYM_PREFIX
sym.v2 = 7
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "NOT"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.typ = SYM_INFIX
sym.v2 = 8
sym.v3 = 0
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "="
symtab_add_entry sym
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_EQUALS) = 15 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "<>"
symtab_add_entry sym
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_CMP_NEQ) = 16 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "<"
symtab_add_entry sym
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_CMP_LT) = 17 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = ">"
symtab_add_entry sym
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_CMP_GT) = 18 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "<="
symtab_add_entry sym
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_CMP_LTEQ) = 19 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = ">="
symtab_add_entry sym
tok_direct(TS_CMP_GTEQ) = 20 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_CMP_GTEQ) = 20 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_CMP_GTEQ) = 20 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_CMP_GTEQ) = 20 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_CMP_GTEQ) = 20 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_CMP_GTEQ) = 20 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_CMP_GTEQ) = 20 
sym.v2 = 9
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "+"
symtab_add_entry sym
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_PLUS) = 21 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "-"
symtab_add_entry sym
tok_direct(TS_DASH) = 22 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_DASH) = 22 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_DASH) = 22 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_DASH) = 22 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_DASH) = 22 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_DASH) = 22 
sym.v2 = 10
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "MOD"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v2 = 11
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "\"
symtab_add_entry sym
tok_direct(TS_BACKSLASH) = 24 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_BACKSLASH) = 24 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_BACKSLASH) = 24 
sym.v2 = 12
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "*"
symtab_add_entry sym
tok_direct(TS_STAR) = 25 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 0 
tok_direct(TS_STAR) = 25 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
tok_direct(TS_STAR) = 25 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
tok_direct(TS_STAR) = 25 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_STAR) = 25 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_STAR) = 25 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "/"
symtab_add_entry sym
tok_direct(TS_SLASH) = 26 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_SLASH) = 26 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_SLASH) = 26 
sym.typ = SYM_PREFIX
sym.v2 = 13
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "|NEGATIVE"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.typ = SYM_INFIX
sym.v2 = 14
sym.v3 = 0
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "^"
symtab_add_entry sym
tok_direct(TS_POWER) = 28 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
tok_direct(TS_POWER) = 28 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
tok_direct(TS_POWER) = 28 
sym.typ = SYM_GENERIC
sym.identifier = "|OPAREN"
symtab_add_entry sym
tok_direct(TS_OPAREN) = 29 
sym.identifier = "|CPAREN"
symtab_add_entry sym
tok_direct(TS_CPAREN) = 30 
tok_direct(TS_NUMINT) =-1 
tok_direct(TS_NUMDEC) =-2 
tok_direct(TS_NUMEXP) =-3 
tok_direct(TS_NUMBASE) =-4 
tok_direct(TS_STRINGLIT) =-5 
sym.typ = SYM_GENERIC
sym.identifier = "|INTEGER_SFX"
symtab_add_entry sym
tok_direct(TS_INTEGER_SFX) = 31 
sym.identifier = "INTEGER"
symtab_add_entry sym
sym.identifier = "|LONG_SFX"
symtab_add_entry sym
tok_direct(TS_LONG_SFX) = 33 
sym.identifier = "LONG"
symtab_add_entry sym
sym.identifier = "|INTEGER64_SFX"
symtab_add_entry sym
tok_direct(TS_INTEGER64_SFX) = 35 
sym.identifier = "INTEGER64"
symtab_add_entry sym
sym.identifier = "|OFFSET_SFX"
symtab_add_entry sym
tok_direct(TS_OFFSET_SFX) = 37 
sym.identifier = "OFFSET"
symtab_add_entry sym
sym.identifier = "|SINGLE_SFX"
symtab_add_entry sym
tok_direct(TS_SINGLE_SFX) = 39 
sym.identifier = "SINGLE"
symtab_add_entry sym
sym.identifier = "|DOUBLE_SFX"
symtab_add_entry sym
tok_direct(TS_DOUBLE_SFX) = 41 
sym.identifier = "DOUBLE"
symtab_add_entry sym
sym.identifier = "|QUAD_SFX"
symtab_add_entry sym
tok_direct(TS_QUAD_SFX) = 43 
sym.identifier = "QUAD"
symtab_add_entry sym
sym.identifier = "|STRING_SFX"
symtab_add_entry sym
tok_direct(TS_STRING_SFX) = 45 
sym.identifier = "STRING"
symtab_add_entry sym
sym.identifier = "DIM"
symtab_add_entry sym
sym.identifier = "AS"
symtab_add_entry sym
sym.identifier = "CONST"
symtab_add_entry sym
sym.identifier = "GOTO"
symtab_add_entry sym
sym.identifier = "EXIT"
symtab_add_entry sym
sym.identifier = "IF"
symtab_add_entry sym
sym.identifier = "THEN"
symtab_add_entry sym
sym.identifier = "ELSE"
symtab_add_entry sym
sym.identifier = "ELSEIF"
symtab_add_entry sym
sym.identifier = "END"
symtab_add_entry sym
sym.identifier = "DO"
symtab_add_entry sym
sym.identifier = "LOOP"
symtab_add_entry sym
sym.identifier = "UNTIL"
symtab_add_entry sym
sym.identifier = "WHILE"
symtab_add_entry sym
sym.identifier = "WEND"
symtab_add_entry sym
sym.identifier = "FOR"
symtab_add_entry sym
sym.identifier = "TO"
symtab_add_entry sym
sym.identifier = "STEP"
symtab_add_entry sym
sym.identifier = "NEXT"
symtab_add_entry sym
sym.identifier = "SELECT"
symtab_add_entry sym
sym.identifier = "CASE"
symtab_add_entry sym
sym.typ = SYM_FUNCTION
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "ABS"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_INTEGER64))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 1 
sym.identifier = "ASC"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "ATN"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
sym.identifier = "BEEP"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.identifier = "CDBL"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CHDIR"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "CHR"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "CINT"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_FLAGS, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
type_add_sig_arg sym.v1, TYPE_LONG, 1 
type_add_sig_arg sym.v1, TYPE_SINGLE, 1 
type_add_sig_arg sym.v1, TYPE_SINGLE, 1 
type_add_sig_arg sym.v1, TYPE_SINGLE, 1 
sym.identifier = "CIRCLE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.identifier = "CLNG"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_INTEGER, 1 
type_add_sig_arg sym.v1, TYPE_LONG, 1 
sym.identifier = "CLS"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_LONG, 1 
type_add_sig_arg sym.v1, TYPE_LONG, 1 
sym.identifier = "COLOR"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_INTEGER, 1 
sym.identifier = "COMMAND"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_LONG))
sym.identifier = "_COMMANDCOUNT"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "COS"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "CSNG"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
sym.identifier = "CSRLIN"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CVD"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CVDMBF"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CVI"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_LONG))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CVL"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CVS"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "CVSMBF"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
sym.identifier = "DATE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "DRAW"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "_DEFLATE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_INTEGER, 0 
sym.identifier = "ENVIRON"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "EXP"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_STRING, 1 
sym.identifier = "FILES"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "FIX"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_LONG))
sym.identifier = "FREEFILE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.identifier = "HEX"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_LIST, 0 
sym.identifier = "INPUT"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "INT"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "_INFLATE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.identifier = "LEFT"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "LCASE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_SINGLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 0 
sym.identifier = "LOG"
symtab_add_entry sym
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.v1 = type_add_sig(sym.v1, type_sig_create$(TYPE_QUAD))
type_add_sig_arg sym.v1, TYPE_QUAD, 0 
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "LTRIM"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 1 
sym.identifier = "MID"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "PLAY"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_LIST, 0 
sym.identifier = "PRINT"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER64, 0 
sym.identifier = "RIGHT"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "RTRIM"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
type_add_sig_arg sym.v1, TYPE_INTEGER, 1 
type_add_sig_arg sym.v1, TYPE_INTEGER, 1 
type_add_sig_arg sym.v1, TYPE_INTEGER, 1 
sym.identifier = "SCREEN"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
type_add_sig_arg sym.v1, TYPE_DOUBLE, 0 
sym.identifier = "SOUND"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_NONE))
type_add_sig_arg sym.v1, TYPE_INTEGER, 1 
sym.identifier = "SYSTEM"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "_STRCMP"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_INTEGER))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "_STRICMP"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_LONG, 0 
sym.identifier = "SPACE"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
sym.identifier = "TIME"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_DOUBLE))
type_add_sig_arg sym.v1, TYPE_SINGLE, 1 
sym.identifier = "TIMER"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "_TRIM"
symtab_add_entry sym
sym.v1 = type_add_sig(0, type_sig_create$(TYPE_STRING))
type_add_sig_arg sym.v1, TYPE_STRING, 0 
sym.identifier = "UCASE"
symtab_add_entry sym
