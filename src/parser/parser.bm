'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'parser.bm - Recursive Descent Parser

function ps_is_linejoin
    ps_is_linejoin = tok_token = TOK_NEWLINE and tok_content$ = ":"
end function
    
sub ps_consume(expected)
    ps_assert expected
    tok_advance
end sub

function ps_consumed(expected)
    if tok_token = expected then
        if tok_token = TOK_NEWLINE and not ps_is_linejoin then ps_actual_linenum = ps_actual_linenum + 1
        tok_advance
        ps_consumed = TRUE
    end if
end function

sub ps_assert(expected)
    if tok_token <> expected then
        ps_error "Syntax error: expected " + tok_human_readable(expected) + " got " + tok_human_readable(tok_token)
    else
        debuginfo "Assert " + tok_human_readable(expected)
    end if
    if tok_token = TOK_NEWLINE and not ps_is_linejoin then ps_actual_linenum = ps_actual_linenum + 1
end sub

function ps_is_terminator(t)
    select case t
    case TOK_ELSE, TOK_NEWLINE
        ps_is_terminator = TRUE
    end select
end function

sub ps_error(msg$)
    Error_message$ = msg$
    error 101
end sub

'Expects: first token in block
'Results: block end marker or EOF
function ps_block
    debuginfo "Start block"
    root = ast_add_node(AST_BLOCK)
    do
        do while tok_token = TOK_NEWLINE
            ps_consume TOK_NEWLINE
        loop
        stmt = ps_stmt
        if stmt = -1 then exit do 'use -1 to signal the end of a block
        if stmt then ast_attach root, stmt '0 means that statement did not generate any ast nodes
    loop
    ps_block = root
    debuginfo "End block"
end function

'$include: 'assignment.bm'
'$include: 'const.bm'
'$include: 'drawing.bm'
'$include: 'for.bm'
'$include: 'function.bm'
'$include: 'goto.bm'
'$include: 'if.bm'
'$include: 'input.bm'
'$include: 'labels.bm'
'$include: 'loop.bm'
'$include: 'pratt.bm'
'$include: 'print.bm'
'$include: 'statement.bm'
'$include: 'tokeng.bm'
'$include: 'var.bm'
