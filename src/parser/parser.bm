sub ps_consume(expected)
    ps_assert expected
    tok_advance
end sub

sub ps_assert(expected)
    if tok_token <> expected then
        fatalerror "Syntax error: expected " + tok_human_readable(expected) + " got " + tok_human_readable(tok_token)
    else
        debuginfo "Assert " + tok_human_readable(expected)
    end if
end sub

'Expects: first token in block
'Results: block end marker or EOF
function ps_block
    debuginfo "Start block"
    root = ast_add_node(AST_BLOCK)
    do
        do while tok_token = TOK_NEWLINE
            ps_consume TOK_NEWLINE
        loop
        stmt = ps_stmt
        if stmt = 0 then exit do 'use 0 to signal the end of a block
        ast_attach root, stmt
    loop
    ps_block = root
    debuginfo "End block"
end function

'Expects: first token of statement
'Results: NEWLINE or block end marker
function ps_stmt
    dim he as hentry_t
    debuginfo "Start statement"
    select case tok_token
        case is < 0
            fatalerror "Unexpected literal " + tok_content$
        case TOK_IF
            ps_stmt = ps_if
        case TOK_DO
            ps_stmt = ps_do
        case TOK_WHILE
            ps_stmt = ps_while
        case TOK_FOR
            ps_stmt = ps_for
        case TOK_SELECT
            ps_stmt = ps_select
        case TOK_END, TOK_ELSE, TOK_LOOP, TOK_WEND, TOK_NEXT, TOK_CASE, TOK_EOF 
            'These all end a block in some fashion. The block-specific
            ' code will assert the ending token.
            ps_stmt = 0
        case TOK_UNKNOWN
            ps_stmt = ps_assignment
        case else
            he = htable_entries(tok_token)
            select case he.typ
            case HE_VARIABLE
                ps_stmt = ps_assignment
            case HE_FUNCTION
                ps_stmt = ps_stmtreg
            case else
                fatalerror tok_human_readable$(tok_token) + " (" + tok_content$ + ") doesn't belong here"
            end select
    end select
    debuginfo "Completed statement"
end function

'Expects: IF
'Results: NEWLINE or post token for nested single-line IFs
function ps_if
    debuginfo "Start conditional"
    root = ast_add_node(AST_IF)
    tok_advance

    condition = ps_expr
    if not type_is_number(type_of_expr(condition)) then fatalerror "IF condition must be a numeric expression"
    ast_attach root, condition
    ps_consume TOK_THEN

    if tok_token = TOK_NEWLINE then 'Multi-line if
        tok_advance
        ast_attach root, ps_block
        if tok_token = TOK_ELSE then
            'Point of contention! QB45 insists on this newline, QB64 doesn't. We shall insist.
            tok_advance
            ps_consume TOK_NEWLINE
            ast_attach root, ps_block
        end if
        ps_consume TOK_END
        ps_consume TOK_IF
    else
        ast_attach root, ps_stmt
        if tok_token = TOK_ELSE then
            tok_advance
            ast_attach root, ps_stmt
        end if
    end if
    ps_if = root
    debuginfo "Completed conditional"
end function
    
'Expects: lvalue token
'Results: token after rvalue
function ps_assignment
    debuginfo "Start assignment"
    ref = ps_variable
    root = ast_add_node(AST_ASSIGN)
    ast_nodes(root).ref = ref
    ps_consume TOK_EQUALS

    expr = ps_expr
    lvalue_type = htable_entries(ref).v1
    rvalue_type = type_of_expr(expr)
    if not type_can_cast(lvalue_type, rvalue_type) then fatalerror "Type of variable in assignment does not match value being assigned"
    expr = ast_add_cast(expr, lvalue_type)
    ast_attach root, expr

    ps_assignment = root
    debuginfo "Completed assignment"
end function

'Expects: variable token
'Results: token after variable & sigil
function ps_variable
    token = tok_token
    content$ = tok_content$
    tok_advance
    ps_variable = ps_variable_p(token, content$)
end function

'Expects: token after variable, variable token as arg
'Results: post token
function ps_variable_p(token, content$)
    debuginfo "Start variable"
    dim he as hentry_t
    'Do array & udt element stuff here.
    'For now only support simple variables.
  
    'New variable?
    if token = TOK_UNKNOWN then
        he.typ = HE_VARIABLE
        htable_add_hentry ucase$(content$), he
        var = htable_last_id
        htable_entries(var).v1 = TYPE_SINGLE
        ps_last_var_index = ps_last_var_index + 1
        htable_entries(var).v2 = ps_last_var_index
    else
        var = token
    end if

    'Check for type sigil
    sigil = ps_opt_sigil
    if sigil then
        if token <> TOK_UNKNOWN and sigil <> htable_entries(var).v1 then fatalerror "Type suffix does not match existing variable type"
        'Otherwise it's a new variable; set its type
        htable_entries(var).v1 = sigil
    end if
    ps_variable_p = var
    debuginfo "Completed variable"
end function

'Expects: sigil or otherwise
'Results: post token if sigil present, unchanged otherwise
function ps_opt_sigil
    debuginfo "Start optional sigil"
    typ = type_sfx2type(tok_token)
    if typ then
        ps_opt_sigil = typ
        tok_advance
    else
        ps_opt_sigil = 0
    end if
    debuginfo "Completed optional sigil"
end function

'Expects: first token of expr
'Results: token after expression
'Note: the expression parser is greedy; it will only stop when it encounters
'      a token that cannot possibly be part of an expression.
function ps_expr
    debuginfo "Start expr"
    ps_expr = pt_expr(0)
    debuginfo "Completed expr"
end function
        
'Expects: statement token
'Results: token after last argument
function ps_stmtreg
    debuginfo "Start stmtreg"
    root = ast_add_node(AST_CALL)
    ast_nodes(root).ref = htable_entries(tok_token).id

    tok_advance
    ps_funcargs root

    ps_stmtreg = root
    debuginfo "Completed stmtreg"
end function

'Expects: function token
'Results: token after last argument
function ps_funccall
    token = tok_token
    tok_advance
    ps_funccall = ps_funccall_p(token)
end function

'Expects: token after function, function token as arg
'Results: token after last argument
function ps_funccall_p(func)
    debuginfo "Start function call"
    root = ast_add_node(AST_CALL)
    ast_nodes(root).ref = func
    sigil = ps_opt_sigil
    if tok_token = TOK_OPAREN then
        ps_funcargs root
        ps_consume TOK_CPAREN
    end if
    if sigil > 0 and sigil <> type_of_call(root) then fatalerror "Function must have correct type suffix if present"
    ps_funccall_p = root
    debuginfo "Completed function call"
end function

'Expects: first token after function name
'Results: token after argument list
sub ps_funcargs(root)
    debuginfo "Start funcargs"
    'This code first builds a candidate type signature, then tries to match that against an instance signature.
    func = ast_nodes(root).ref
    do
        select case tok_token
        case TOK_CPAREN, TOK_ELSE, TOK_NEWLINE
            'End of the argument list
            exit do
        case else
            ps_funcarg root, candidate$
        end select
    loop
    'Now we need to find a signature of func that matches candidate$.
    matching_sig = type_find_sig_match(func, candidate$)
    if matching_sig = 0 then fatalerror "Cannot find matching type signature"
    ast_nodes(root).ref2 = matching_sig
    'Modify argument nodes to add in casts where needed
    for i = 1 to ast_num_children(root)
        expr = ast_get_child(root, i)
        expr_type = type_of_expr(expr)
        arg_type = type_sig_argtype(matching_sig, i)
        if expr_type <> arg_type then
            ast_replace_child root, i, ast_add_cast(expr, arg_type)
        end if
    next i
    debuginfo "Completed funcargs"
end sub

'Expects: start of expression
'Results: token after expression
sub ps_funcarg(root, candidate$)
    debuginfo "Start funcarg"
    expr = ps_expr
    'Declare whether this expression would satisfy a BYREF argument
    if ast_nodes(expr).typ = AST_VAR then flags = TYPE_BYREF
    candidate$ = type_sig_add_arg$(candidate$, type_of_expr(expr), flags)
    ast_attach root, expr
    debuginfo "Completed funcarg"
end sub

'$include: 'pratt.bm'
'$include: 'tokeng.bm'
