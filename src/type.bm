'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'type.bm - Routines for type management

function type_is_number(typ)
    select case typ
    case TYPE_INTEGER, TYPE_LONG, TYPE_INTEGER64, TYPE_SINGLE, TYPE_DOUBLE, TYPE_QUAD
        type_is_number = TRUE
    end select
end function

function type_of_expr(root)
    select case ast_nodes(root).typ
    case AST_CONSTANT
        type_of_expr = type_of_constant(root)
    case AST_CALL
        type_of_expr = type_of_call(root)
    case AST_VAR
        type_of_expr = type_of_var(root)
    case AST_CAST
        type_of_expr = type_of_cast(root)
    case AST_FLAGS
        type_of_expr = TYPE_LONG
    case else
        ps_error "Cannot determine type of expression " + str$(root)
    end select
end function

function type_of_constant(node)
    type_of_constant = ast_constant_types(ast_nodes(node).ref)
end function

function type_of_call(node)
    type_of_call = type_sig_return(ast_nodes(node).ref2)
end function

function type_of_var(node)
    type_of_var = symtab(ast_nodes(node).ref).v1
end function

function type_of_cast(node)
    type_of_cast = ast_nodes(node).ref
end function
    
function type_can_cast(a, b)
    type_can_cast = (type_is_number(a) and type_is_number(b)) or a = b
end function

'Can we can from a to b without loss of data?
function type_can_safely_cast(a, b)
    if a = b then
        type_can_safely_cast = TRUE
        exit function
    end if
    if not type_can_cast(a, b) then exit function
    select case a
    case TYPE_INTEGER
        type_can_safely_cast = TRUE
    case TYPE_LONG
        type_can_safely_cast = (b = TYPE_INTEGER64) or (b = TYPE_DOUBLE) or (b = TYPE_QUAD)
    case TYPE_INTEGER64
        type_can_safely_cast = b = TYPE_QUAD
    case TYPE_SINGLE
        type_can_safely_cast = (b = TYPE_DOUBLE) or (b = TYPE_QUAD)
    case TYPE_DOUBLE
        type_can_safely_cast = b = TYPE_QUAD
    case TYPE_FLOAT
        type_can_safely_cast = FALSE
    end select
end function

function type_sig_return(sig_index)
    type_sig_return = cvl(left$(type_signatures(sig_index).sig, 4))
end function

function type_sig_numargs(sig_index)
    type_sig_numargs = (len(type_signatures(sig_index).sig) - 4) / 8
end function

function type_sig_argtype(sig_index, arg_index)
    type_sig_argtype = cvl(mid$(type_signatures(sig_index).sig, arg_index * 8 - 3, 4))
end function

function type_sig_argflags(sig_index, arg_index)
    type_sig_argflags = cvl(mid$(type_signatures(sig_index).sig, arg_index * 8 + 1, 4))
end function

function type_add_sig(previous, sig$)
    type_last_signature = type_last_signature + 1
    if ubound(type_signatures) = type_last_signature then
        redim _preserve type_signatures(type_last_signature * 2) as type_signature_t
    end if
    type_signatures(type_last_signature).sig = sig$
    if previous then type_signatures(previous).succ = type_last_signature
    type_add_sig = type_last_signature
end function

sub type_add_sig_arg(sig_index, typ, flags)
    type_signatures(sig_index).sig = type_sig_add_arg$(type_signatures(sig_index).sig, typ, flags)
end sub
    
function type_sig_create$(return_type)
    type_sig_create$ = mkl$(return_type)
end function

function type_sig_add_arg$(old$, new_argtype, new_argflags)
    type_sig_add_arg$ = old$ + mkl$(new_argtype) + mkl$(new_argflags)
end function

function type_find_sig_match(func, candidate$)
    debuginfo "Function resolution candidate is " + type_human_sig$(mkl$(0) + candidate$)
    sig_index = symtab(func).v1
    while sig_index <> 0
        if type_sig_is_compatible(sig_index, candidate$, 0) then
            compatibles$ = compatibles$ + mkl$(sig_index)
        end if
        sig_index = type_signatures(sig_index).succ
    wend
    if len(compatibles$) = 0 then
        exit function
    elseif len(compatibles$) = 4 then
        type_find_sig_match = cvl(compatibles$)
    else
        type_find_sig_match = type_pick_best_compatible_sig(compatibles$, candidate$)
    end if
end function

function type_sig_is_compatible(sig_index, candidate$, checkmode)
    debuginfo "Comparing to " + type_human_sig$(type_signatures(sig_index).sig) + "..."
    s = 1
    c = 1
    do until c * 8 > len(candidate$)
        if s > type_sig_numargs(sig_index) then
            'Cannot possibly match, candidate has more args than sig can accept
            debuginfo "No, candidate has too many arguments"
            exit function
        end if
        sig_arg = type_sig_argtype(sig_index, s)
        sig_flags = type_sig_argflags(sig_index, s)
        c_arg = cvl(mid$(candidate$, 8 * c - 7, 4))
        c_flags = cvl(mid$(candidate$, 8 * c - 3, 4))
        if not type_sig_compatible_arg(sig_arg, sig_flags, c_arg, c_flags, checkmode) then
            debuginfo "No, mismatch on arg" + str$(c) + " (candidate has " + type_human_readable$(c_arg) + ")"
            exit function
        end if
        s = s + 1
        c = c + 1
    loop
    for i = s to type_sig_numargs(sig_index)
        'sig has more args; they had better be optional
        if type_sig_argflags(sig_index, i) AND TYPE_OPTIONAL = 0 then
            debuginfo "No, required argument" + str$(i) + " not provided"
            exit function
        end if
    next i
    type_sig_is_compatible = TRUE
    debuginfo "Compatible"
end function

function type_pick_best_compatible_sig(compatibles$, candidate$)
    'Picks the first sig that has lossless casts, otherwise the last sig if
    'no lossless casts are available.
    debuginfo "Looking for a safe cast option"
    for i = 1 to len(compatibles$) / 4
        sig_index = cvl(mid$(compatibles$, i * 4 - 3, 4))
        if type_sig_is_compatible(sig_index, candidate$, 1) then
            type_pick_best_compatible_sig = sig_index
            debuginfo "Safe signature found."
            exit function
        end if
    next i
    debuginfo "No safe signature found."
    type_pick_best_compatible_sig = cvl(right$(compatibles$, 4))
end function

function type_sig_compatible_arg(sig_arg, sig_flags, c_arg, c_flags, checkmode)
'checkmode = 0 for lossy casts, 1 for lossless casts only
    if sig_flags and TYPE_BYREF then
        result = (c_flags and TYPE_BYREF) > 0 and sig_arg = c_arg
    elseif checkmode = 0 then
        result = type_can_cast(c_arg, sig_arg)
    elseif checkmode = 1 then
        result = type_can_safely_cast(c_arg, sig_arg)
    end if
    type_sig_compatible_arg = result
end function

function type_sfx2type(sfx_token)
    select case sfx_token
    case TOK_INTEGER_SFX
        type_sfx2type = TYPE_INTEGER
    case TOK_LONG_SFX
        type_sfx2type = TYPE_LONG
    case TOK_INTEGER64_SFX
        type_sfx2type = TYPE_INTEGER64
    case TOK_SINGLE_SFX
        type_sfx2type = TYPE_SINGLE
    case TOK_DOUBLE_SFX
        type_sfx2type = TYPE_DOUBLE
    case TOK_QUAD_SFX
        type_sfx2type = TYPE_QUAD
    case TOK_OFFSET_SFX
        type_sfx2type = TYPE_OFFSET
    case TOK_STRING_SFX
        type_sfx2type = TYPE_STRING
    case else
        type_sfx2type = 0
    end select
end function

function type_human_readable$(typ)
    select case typ
    case TYPE_NONE
        type_human_readable$ = "NONE"
    case TYPE_INTEGER
        type_human_readable$ = "INTEGER"
    case TYPE_LONG
        type_human_readable$ = "LONG"
    case TYPE_INTEGER64
        type_human_readable$ = "INTEGER64"
    case TYPE_SINGLE
        type_human_readable$ = "SINGLE"
    case TYPE_DOUBLE
        type_human_readable$ = "DOUBLE"
    case TYPE_QUAD
        type_human_readable$ = "QUAD"
    case TYPE_STRING
        type_human_readable$ = "STRING"
    case TYPE_FLAGS
        type_human_readable$ = "FLAGS"
    case TYPE_VARLIST
        type_human_readable$ = "VARLIST"
    case else
        type_human_readable$ = "UNKNOWN"
    end select
end function

function type_human_sig$(sig$)
    o$ = type_human_readable$(cvl(left$(sig$, 4))) + "("
    for p = 1 to (len(sig$) - 4) / 8
        flags = cvl(mid$(sig$,p * 8 + 1, 4))
        if flags and TYPE_BYVAL then o$ = o$ + "BYVAL "
        if flags and TYPE_BYREF then o$ = o$ + "BYREF "
        if flags and TYPE_OPTIONAL then o$ = o$ + "OPTION "
        o$ = o$ + type_human_readable$(cvl(mid$(sig$, p * 8 - 3, 4)))
        if p < (len(sig$) - 4) / 8 then o$ = o$ + ", "
    next p
    type_human_sig$ = o$ + ")"
end function
 
function type_detect_numint_type(content$)
    '2^15-1 = 32767
    '2^31-1 = 2147483647
    '2^63-1 = 18446744073709551615
    select case len(content$)
    case is < 5
        type_detect_numint_type = TYPE_INTEGER
    case 5
        if _strcmp("32767", content$) = -1 then
            type_detect_numint_type = TYPE_LONG
        else
            type_detect_numint_type = TYPE_INTEGER
        end if
    case is < 10
        type_detect_numint_type = TYPE_LONG
    case 10
        if _strcmp("2147483647", content$) = -1 then
            type_detect_numint_type = TYPE_INTEGER64
        else
            type_detect_numint_type = TYPE_LONG
        end if
    case is < 20
        type_detect_numint_type = TYPE_INTEGER64
    case 20
        if _strcmp("18446744073709551615", content$) = -1 then
            'Should we be checking for overflow here?
            type_detect_numint_type = TYPE_QUAD
        else
            type_detect_numint_type = TYPE_INTEGER64
        end if
    case > 20
        'Again, should maybe check for overflow here
        type_detect_numint_type = TYPE_QUAD
    end select
end function

function type_detect_numdec_type(content$)
    '<= 7 digits -> single, <= 16 digits -> double
    select case len(content$) - 1 '-1 because there's a decimal point
    case is <= 7
        type_detect_numdec_type = TYPE_SINGLE
    case is <= 16
        type_detect_numdec_type = TYPE_DOUBLE
    case else
        type_detect_numdec_type = TYPE_QUAD
    end select
end function

function type_detect_numexp_type(content$)
    'e -> single, d -> double, (q -> quad ?)
    for i = 1 to len(content$)
        if asc(content$, i) = 68 or asc(content$, i) = 100 then 'd or D
            type_detect_numexp_type = TYPE_DOUBLE
            exit function
        end if
    next i
    type_detect_numexp_type = TYPE_SINGLE
end function
