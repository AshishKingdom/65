deflng a-z

' Initialise a clean AST
sub ast_init
    ast_constants(AST_NONE) = "None"
    ast_constant_types(AST_NONE) = TYPE_ANY
    ast_constants(AST_FALSE) = "0"
    ast_constant_types(AST_FALSE) = TYPE_NUMERIC
    ast_constants(AST_TRUE) = "-1"
    ast_constant_types(AST_TRUE) = TYPE_NUMERIC
    ast_constants(AST_ONE) = "1"
    ast_constant_types(AST_ONE) = TYPE_NUMERIC
    ast_last_constant = 4
end sub

function ast_add_constant(token, content$)
    if ast_last_constant = ubound(ast_constants) then ast_expand_constants_array
    ast_last_constant = ast_last_constant + 1
    select case token
    case TOK_NUMINT
        ast_constants(ast_last_constant) = content$
        ast_constant_types(ast_last_constant) = type_detect_numint_type(content$)
    case TOK_NUMDEC
        ast_constants(ast_last_constant) = content$
        ast_constant_types(ast_last_constant) = TYPE_DOUBLE
    case TOK_NUMBASE
        ast_constants(ast_last_constant) = ltrim$(str$(val(content$)))
        ast_constant_types(ast_last_constant) = type_detect_numint_type(ast_constants(ast_last_constant))
    case TOK_NUMEXP
        fatalerror "No support for numbers with exponents"
    case TOK_STRING
        'Strip quotes
        ast_constants(ast_last_constant) = mid$(content$, 2, len(content$) - 2)
        ast_constant_types(ast_last_constant) = TYPE_STRING
    end select
    ast_add_constant = ast_last_constant
end function
    
function ast_add_node(typ)
    if ast_last_node = ubound(ast_nodes) then ast_expand_nodes_arrays
    ast_last_node = ast_last_node + 1
    ast_nodes(ast_last_node).typ = typ
    ast_add_node = ast_last_node
end function

sub ast_attach(parent, child)
    ast_nodes(parent).num_children = ast_nodes(parent).num_children + 1
    ast_children(parent) = ast_children(parent) + mkl$(child)
end sub

function ast_num_children(node)
    ast_num_children = len(ast_children(node)) / len(dummy&)
end function

function ast_get_child(node, index)
    ast_get_child = cvl(mid$(ast_children(node), len(dummy&) * (index - 1) + 1, len(dummy&)))
end function

sub ast_expand_nodes_arrays()
    new_size = ubound(ast_nodes) * 2
    redim _preserve ast_nodes(1 to new_size) as ast_node_t
    redim _preserve ast_children(1 to new_size) as string
end sub

sub ast_expand_constants_array()
    new_size = ubound(ast_constants) * 2
    redim _preserve ast_constants(1 to new_size) as string
    redim _preserve ast_constant_types(1 to new_size) as long
end sub
