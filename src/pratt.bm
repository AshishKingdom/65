deflng a-z

function pt_expr(rbp)
    if pt_token = 0 then
        t = tok_next_token
        content$ = tok_content$
    else
        t = pt_token
        content$ = pt_next_content$
    end if
    pt_token = tok_next_token
    pt_next_content$ = tok_content$
    left_node = nud(t, content$)
    while rbp < lbp(pt_token)
        t = pt_token
        content$ = pt_next_content$
        pt_token = tok_next_token
        pt_next_content$ = tok_content$
        left_node = led(t, content$, left_node)
    wend
    pt_expr = left_node
end function

function lbp(token)
    dim he as hentry_t
    he = htable_entries(token)
    select case he.typ
    case HE_INFIX
        lbp = he.v1
    case else
        lbp = 0
    end select
end function

function nud(token, content$)
    select case token
    case TOK_NUMINT
        node = ast_add_node(AST_CONSTANT)
        ast_nodes(node).ref = ast_add_constant(content$)
    case else
        select case htable_entries(token).typ
        case HE_VARIABLE
            node = ast_add_node(AST_VAR)
            ast_nodes(node).ref = token
        case else
            fatalerror "Unexpected " + tok_human_readable$(token) + " " + content$
        end select
    end select
    nud = node
end function

function led(token, content$, left_node)
    dim he as hentry_t
    he = htable_entries(token)
    node = ast_add_node(AST_CALL)
    ast_nodes(node).ref = token
    select case he.typ
    case HE_INFIX
        ast_attach node, left_node
        ast_attach node, pt_expr(he.v1)
    case else
        fatalerror "Unexpected " + tok_human_readable$(token) + " " + content$
    end select
    led = node
end function
