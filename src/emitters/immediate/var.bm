'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'var.bm - Variable handling

sub imm_do_cast(node, result as imm_value_t)
    imm_eval ast_get_child(node, 1), result
    imm_enforce_type result, ast_nodes(node).ref
end sub

sub imm_enforce_type(result as imm_value_t, typ)
    select case typ
    case TYPE_INTEGER
        result.n = cint(result.n)
    case TYPE_LONG
        result.n = clng(result.n)
    case TYPE_INTEGER64
        result.n = _round(result.n)
        if result.n < -2147483648 or result.n > 2147483647 then error 6
    case TYPE_SINGLE
        result.n = csng(result.n)
    case TYPE_DOUBLE
        result.n = cdbl(result.n)
    case TYPE_QUAD, TYPE_STRING
        'Nothing to do here
    end select
end sub

function imm_add_offset(base_addr, offset)
    'The base_addr might be negative if it is a heap address, so "pass through"
    'the negative sign. e.g. base_addr = -10, offset = 2, result = -12
    imm_add_offset = (abs(base_addr) + offset) * sgn(base_addr)
end function

'Get the address of a variable. Handles simple scalars, elments of nested UDTs & arrays,
'and entire UDTs & arrays. If the returned value is < 0, it is a heap address. Otherwise,
'it is a stack address.
function imm_get_addr(node)
    select case ast_nodes(node).typ
    case AST_VAR
        'Always a stack address. Even arrays, because a reference to the entire array
        'refers to the dimension info block that sits on the stack (unless it's an
        'array in a UDT in an array, but that wouldn't be an AST_VAR).
        imm_get_addr = symtab(ast_nodes(node).ref).v2
    case AST_UDT_ACCESS
        base_addr = imm_get_addr(ast_get_child(node, 1))
        offset = symtab(ast_nodes(node).ref).v2
        imm_get_addr = imm_add_offset(base_addr, offset)
    case AST_ARRAY_ACCESS
        array = ast_get_child(node, 1)
        array_type = type_of_lvalue(array)
        info_base_addr = imm_get_addr(array)
        element_type = symtab(array_type).v3
        dimensions = symtab(array_type).v4
        'Array descriptor:
        ' - pointer to data
        ' - number of dimensions
        ' - lbound of leftmost dimension
        ' - ubound of leftmost dimension
        ' - etc.
        ' - lbound of rightmost dimension
        ' - ubound of rightmost dimension
        block_size = 1
        for i = 1 to dimensions
            dim index as imm_value_t
            lower_bound = imm_get_at_addr_n(imm_add_offset(info_base_addr, i * 2))
            upper_bound = imm_get_at_addr_n(imm_add_offset(info_base_addr, i * 2 + 1))
            imm_eval ast_get_child(node, i + 1), index
            'TODO: bounds checking
            offset = offset + (index.n - lower_bound) * block_size
            block_size = upper_bound - lower_bound + 1
        next i
        offset = offset * type_fixed_size(element_type)
        imm_get_addr = imm_add_offset(imm_get_at_addr_n(info_base_addr), offset)
    end select
end function

sub imm_set_at_addr(addr, v as imm_value_t)
    'print "Set ["; addr; "] ="; v.n; v.s
    if addr < 0 then
        imm_heap(-addr) = v
    elseif addr > 0 then
        imm_stack(addr) = v
    else
        imm_error "Null pointer value write"
    end if
end sub

sub imm_set_at_addr_s(addr, v$)
    'print "Set ["; addr; "] ="; s
    if addr < 0 then
        imm_heap(-addr).s = v$
    elseif addr > 0 then
        imm_stack(addr).s = v$
    else
        imm_error "Null pointer string write"
    end if
end sub

sub imm_set_at_addr_n(addr, n as _float)
    'print "Set ["; addr; "] ="; n
    if addr < 0 then
        imm_heap(-addr).n = n
    elseif addr > 0 then
        imm_stack(addr).n = n
    else
        imm_error "Null pointer numeric write"
    end if
end sub

sub imm_get_at_addr(addr, v as imm_value_t)
    if addr < 0 then
        v = imm_heap(-addr)
    elseif addr > 0 then
        v = imm_stack(addr)
    else
        imm_error "Null pointer value read"
    end if
end sub

function imm_get_at_addr_s$(addr)
    if addr < 0 then
        imm_get_at_addr_s$ = imm_heap(-addr).s
    elseif addr > 0 then
        imm_get_at_addr_s$ = imm_stack(addr).s
    else
        imm_error "Null pointer string read"
    end if
end sub

function imm_get_at_addr_n##(addr)
    if addr < 0 then
        imm_get_at_addr_n## = imm_heap(-addr).n
    elseif addr > 0 then
        imm_get_at_addr_n## = imm_stack(addr).n
    else
        imm_error "Null pointer numeric read"
    end if
end function