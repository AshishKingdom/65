'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'call.bm - Executor for CALLs

'Operations may be inlined here if they are short
sub imm_do_call(node, result as imm_value_t)
    dim v1 as imm_value_t
    dim v2 as imm_value_t
    select case ast_nodes(node).ref
    case TOK_PRINT
        imm_do_print node
    case TOK_INPUT
        imm_do_stmt_input node
    case TOK_CHR
        imm_eval ast_get_child(node, 1), v1
        result.s = chr$(v1.n)
    case TOK_CLS
        cls
    case TOK_SYSTEM
        if ast_num_children(node) = 1 then
            imm_eval ast_get_child(node, 1), v1
            system v1.n
        else
            system
        end if
    case TOK_NEGATIVE
        imm_eval ast_get_child(node, 1), v1
        result.n = -v1.n
    case TOK_PLUS
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        if type_of_call(node) = TYPE_STRING then result.s = v1.s + v2.s else result.n = v1.n + v2.n
    case TOK_DASH
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n - v2.n
    case TOK_STAR
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n * v2.n
    case TOK_SLASH
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n / v2.n
    case TOK_BACKSLASH
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n \ v2.n
    case TOK_MOD
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n mod v2.n
    case TOK_POWER
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n ^ v2.n
    case TOK_NOT
        imm_eval ast_get_child(node, 1), v1
        result.n = not v1.n
    case TOK_AND
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n and v2.n
    case TOK_OR
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n or v2.n
    case TOK_XOR
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n xor v2.n
    case TOK_EQV
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n eqv v2.n
    case TOK_IMP
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n imp v2.n
    case TOK_EQUALS
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        if type_of_expr(ast_get_child(node, 1)) = TYPE_STRING then result.n = v1.s = v2.s else result.n = v1.n = v2.n
    case TOK_CMP_NEQ
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        if type_of_expr(ast_get_child(node, 1)) = TYPE_STRING then result.n = v1.s <> v2.s else result.n = v1.n <> v2.n
    case TOK_CMP_LT
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n < v2.n
    case TOK_CMP_GT
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n > v2.n
    case TOK_CMP_LTEQ
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n <= v2.n
    case TOK_CMP_GTEQ
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n >= v2.n
    case else
        imm_error "Unhandled call to " + tok_human_readable$(ast_nodes(node).ref)
    end select
    imm_enforce_type result, type_of_call(node)
end sub
