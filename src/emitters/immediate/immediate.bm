sub imm_init
    redim imm_stack(ps_last_var_index) as imm_value_t
    'No, I'm not mad - this explicit initialisation is to
    'work around a QB64 bug where it doesn't set these values
    'properly. Probably something to do with the dynamic-length
    'string in a UDT.
    for i = 1 to ps_last_var_index
        imm_stack(i).t = TYPE_NONE
        imm_stack(i).s = ""
        imm_stack(i).n = 0
    next i
end sub

sub imm_reinit
    u = ubound(imm_stack)
    redim _preserve imm_stack(ps_last_var_index) as imm_value_t
    for i = u + 1 to ps_last_var_index
        imm_stack(i).t = TYPE_NONE
        imm_stack(i).s = ""
        imm_stack(i).n = 0
    next i
end sub

sub imm_run(node)
    dim dummy_result as imm_value_t
    imm_eval node, dummy_result
end sub

sub imm_eval(node, result as imm_value_t)
    ref = ast_nodes(node).ref
    select case ast_nodes(node).typ
    case AST_ASSIGN
        imm_do_assign node
    case AST_IF
        imm_do_conditional node
    case AST_DO_PRE
        print "DO WHILE; executing once"
        imm_eval ast_get_child(node, 2), result
    case AST_DO_POST
        print "LOOP WHILE; executing once"
        imm_eval ast_get_child(node, 2), result
    case AST_FOR
        print "FOR; skipping"
    case AST_SELECT
        print "SELECT; skipping"
    case AST_CALL
        imm_do_call node, result
    case AST_CONSTANT
        result.t = ast_constant_types(ref)
        if result.t = TYPE_STRING then result.s = ast_constants(ref) else result.n = val(ast_constants(ref))
    case AST_BLOCK
        for i = 1 to ast_num_children(node)
            imm_eval ast_get_child(node, i), result
        next i
    case AST_VAR
        sp = imm_var_stack_pos(ref)
        result.s = imm_stack(sp).s
        result.n = imm_stack(sp).n
    case AST_CAST
        imm_do_cast node, result
    end select
end sub

sub imm_do_conditional(node)
    dim condition as imm_value_t
    imm_eval ast_get_child(node, 1), condition
    if condition.n then
        imm_run ast_get_child(node, 2)
    elseif ast_num_children(node) > 2 then
        imm_run ast_get_child(node, 3)
    end if
end sub

sub imm_do_cast(node, result as imm_value_t)
    imm_eval ast_get_child(node, 1), result
    result.t = ast_nodes(node).ref
    imm_enforce_type result
end sub

sub imm_do_assign(node)
    dim rvalue as imm_value_t
    imm_eval ast_get_child(node, 1), rvalue
    sp = imm_var_stack_pos(ast_nodes(node).ref)
    imm_stack(sp).t = type_of_var(node)
    if type_of_var(node) = TYPE_STRING then
        imm_stack(sp).s = rvalue.s
    else
        imm_stack(sp).n = rvalue.n
    end if
end sub

sub imm_enforce_type(result as imm_value_t)
    select case result.t
    case TYPE_INTEGER
        result.n = cint(result.n)
    case TYPE_LONG
        result.n = clng(result.n)
    case TYPE_INTEGER64
        result.n = _round(result.n)
    case TYPE_SINGLE
        result.n = csng(result.n)
    case TYPE_DOUBLE
        result.n = cdbl(result.n)
    case TYPE_QUAD, TYPE_STRING
        'Nothing to do here
    end select
end sub

function imm_var_stack_pos(var)
    imm_var_stack_pos = symtab(var).v2
end function

sub imm_do_call(node, result as imm_value_t)
    dim v1 as imm_value_t
    dim v2 as imm_value_t
    result.t = type_of_call(node)
    select case ast_nodes(node).ref
    case TOK_PRINT
        if ast_num_children(node) > 0 then
            imm_eval ast_get_child(node, 1), v1
            if v1.t = TYPE_STRING then print v1.s else print v1.n
        else
            print
        end if
    case TOK_CHR
        imm_eval ast_get_child(node, 1), v1
        result.s = chr$(v1.n)
    case TOK_NEGATIVE
        imm_eval ast_get_child(node, 1), v1
        result.n = -v1.n
    case TOK_PLUS
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        if result.t = TYPE_STRING then result.s = v1.s + v2.s else result.n = v1.n + v2.n
    case TOK_DASH
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n - v2.n
    case TOK_STAR
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n * v2.n
    case TOK_SLASH
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n / v2.n
    case TOK_POWER
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n ^ v2.n
    case TOK_NOT
        imm_eval ast_get_child(node, 1), v1
        result.n = not v1.n
    case TOK_AND
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n and v2.n
    case TOK_OR
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n or v2.n
    case TOK_XOR
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n xor v2.n
    case TOK_EQV
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n eqv v2.n
    case TOK_IMP
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n imp v2.n
    case TOK_EQUALS
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        if result.t = TYPE_STRING then result.n = v1.s = v2.s else result.n = v1.n = v2.n
    case TOK_CMP_NEQ
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        if result.t = TYPE_STRING then result.n = v1.s <> v2.s else result.n = v1.n <> v2.n
    case TOK_CMP_LT
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n < v2.n
    case TOK_CMP_GT
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n > v2.n
    case TOK_CMP_LTEQ
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n <= v2.n
    case TOK_CMP_GTEQ
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        result.n = v1.n >= v2.n
    end select
    imm_enforce_type result
end sub
