generic unknown ; nosym
generic newline ; direct nosym
generic comma   ; direct nosym

# Literals have a hard-coded precedence of 1, which needs to be lower than any other
# The precedence of NOT may surprise you; NOT 2 + 3 is NOT (2 + 3).
# Note -3^2 = -(3^2)
#       name   precedence  assoc.   return  args
prefix  not             2           number  number
infix   and             2   left    number  number,number
infix   or              2   left    number  number,number
infix   xor             2   left    number  number,number
infix   eqv             2   left    number  number,number
infix   imp             2   left    number  number,number
infix   =(equals)       3   left    number  number,number ; direct
infix   <(cmp_lt)       3   left    number  number,number ; direct
infix   >(cmp_gt)       3   left    number  number,number ; direct
infix   >=(cmp_gteq)    3   left    number  number,number ; direct
infix   <=(cmp_lteq)    3   left    number  number,number ; direct
infix   +(plus)         4   left    number  number,number ; direct
infix   -(dash)         4   left    number  number,number ; direct
infix   *(star)         5   left    number  number,number ; direct
infix   /(slash)        5   left    number  number,number ; direct
prefix  negative        6           number  number
infix   ^(power)        7   left    number  number        ; direct

# Parentheses don't have any real meaning, they only direct the parsing
generic oparen ; direct nosym
generic cparen ; direct nosym

# Numbers
# numint: 1234, numdec: 12.34, numexp: 12.3E4, numbase: &H1234
literal numint ; direct
literal numdec ; direct
literal numexp ; direct
literal numbase ; direct

# A string
literal string ; direct

# Type symbols
generic integer_sfx     ; direct nosym
generic long_sfx        ; direct nosym
generic biginteger_sfx  ; direct nosym
generic offset_sfx      ; direct nosym

generic single_sfx      ; direct nosym
generic double_sfx      ; direct nosym
generic string_sfx      ; direct nosym

# Basic language constructs
generic if
generic then
generic else
# end is special because it's both a command on its own and part of END IF.
# It gets special treatment in the statement parser.
generic end

generic do
generic loop
generic until
generic while
generic wend

generic for
generic to
generic step
generic next

generic select
generic case

# functions with return type none are subs
function _autodisplay   none
function beep           none
function chr            string  ubyte
function _copypalette   none    number,number
function left           string  string,number
function print          none    any
function rgba           number  number,?number,?number,?number
