# Copyright 2020 Luke Ceddia
# SPDX-License-Identifier: Apache-2.0
# tokens.list - Description of parser tokens

generic unknown   ; nosym
generic eof       ; nosym
# End Of Input - used to signify the end of a user's input in interactive
# mode (can't use newline because we're always looking one token ahead).
generic eoi       ; nosym
generic newline   ; direct nosym
generic comma     ; direct nosym
generic semicolon ; direct nosym

# Literals have a hard-coded precedence of 1, which needs to be lower than any other
# The precedence of NOT may surprise you; NOT 2 + 3 is NOT (2 + 3).
# Note -3^2 = -(3^2)
#       name   precedence  assoc.   return    args
prefix  not             2           integer   integer 
prefix  not             2           long      long
prefix  not             2           integer64 integer64
infix   and             2   left    integer   integer,integer
infix   and             2   left    long      long,long
infix   and             2   left    integer64 integer64,integer64
infix   or              2   left    integer   integer,integer
infix   or              2   left    long      long,long
infix   or              2   left    integer64 integer64,integer64
infix   xor             2   left    integer   integer,integer
infix   xor             2   left    long      long,long
infix   xor             2   left    integer64 integer64,integer64
infix   eqv             2   left    integer   integer,integer
infix   eqv             2   left    long      long,long
infix   eqv             2   left    integer64 integer64,integer64
infix   imp             2   left    integer   integer,integer
infix   imp             2   left    long      long,long
infix   imp             2   left    integer64 integer64,integer64
infix   =(equals)       3   left    integer   string,string       ; direct
infix   =(equals)       3   left    integer   integer,integer     ; direct
infix   =(equals)       3   left    integer   long,long           ; direct
infix   =(equals)       3   left    integer   integer64,integer64 ; direct
infix   =(equals)       3   left    integer   single,single       ; direct
infix   =(equals)       3   left    integer   double,double       ; direct
infix   =(equals)       3   left    integer   quad,quad           ; direct
infix   <>(cmp_neq)     3   left    integer   string,string       ; direct
infix   <>(cmp_neq)     3   left    integer   integer,integer     ; direct
infix   <>(cmp_neq)     3   left    integer   long,long           ; direct
infix   <>(cmp_neq)     3   left    integer   integer64,integer64 ; direct
infix   <>(cmp_neq)     3   left    integer   single,single       ; direct
infix   <>(cmp_neq)     3   left    integer   double,double       ; direct
infix   <>(cmp_neq)     3   left    integer   quad,quad           ; direct
infix   <(cmp_lt)       3   left    integer   string,string       ; direct
infix   <(cmp_lt)       3   left    integer   integer,integer     ; direct
infix   <(cmp_lt)       3   left    integer   long,long           ; direct
infix   <(cmp_lt)       3   left    integer   integer64,integer64 ; direct
infix   <(cmp_lt)       3   left    integer   single,single       ; direct
infix   <(cmp_lt)       3   left    integer   double,double       ; direct
infix   <(cmp_lt)       3   left    integer   quad,quad           ; direct
infix   >(cmp_gt)       3   left    integer   string,string       ; direct
infix   >(cmp_gt)       3   left    integer   integer,integer     ; direct
infix   >(cmp_gt)       3   left    integer   long,long           ; direct
infix   >(cmp_gt)       3   left    integer   integer64,integer64 ; direct
infix   >(cmp_gt)       3   left    integer   single,single       ; direct
infix   >(cmp_gt)       3   left    integer   double,double       ; direct
infix   >(cmp_gt)       3   left    integer   quad,quad           ; direct
infix   <=(cmp_lteq)    3   left    integer   string,string       ; direct
infix   <=(cmp_lteq)    3   left    integer   integer,integer     ; direct
infix   <=(cmp_lteq)    3   left    integer   long,long           ; direct
infix   <=(cmp_lteq)    3   left    integer   integer64,integer64 ; direct
infix   <=(cmp_lteq)    3   left    integer   single,single       ; direct
infix   <=(cmp_lteq)    3   left    integer   double,double       ; direct
infix   <=(cmp_lteq)    3   left    integer   quad,quad           ; direct
infix   >=(cmp_gteq)    3   left    integer   string,string       ; direct
infix   >=(cmp_gteq)    3   left    integer   integer,integer     ; direct
infix   >=(cmp_gteq)    3   left    integer   long,long           ; direct
infix   >=(cmp_gteq)    3   left    integer   integer64,integer64 ; direct
infix   >=(cmp_gteq)    3   left    integer   single,single       ; direct
infix   >=(cmp_gteq)    3   left    integer   double,double       ; direct
infix   >=(cmp_gteq)    3   left    integer   quad,quad           ; direct
infix   +(plus)         4   left    string    string,string       ; direct
infix   +(plus)         4   left    integer   integer,integer     ; direct
infix   +(plus)         4   left    long      long,long           ; direct
infix   +(plus)         4   left    integer64 integer64,integer64 ; direct
infix   +(plus)         4   left    single    single,single       ; direct
infix   +(plus)         4   left    double    double,double       ; direct
infix   +(plus)         4   left    quad      quad,quad           ; direct
infix   -(dash)         4   left    integer   integer,integer     ; direct
infix   -(dash)         4   left    long      long,long           ; direct
infix   -(dash)         4   left    integer64 integer64,integer64 ; direct
infix   -(dash)         4   left    single    single,single       ; direct
infix   -(dash)         4   left    double    double,double       ; direct
infix   -(dash)         4   left    quad      quad,quad           ; direct
infix   *(star)         5   left    long      integer,integer     ; direct
infix   *(star)         5   left    integer64 long,long           ; direct
infix   *(star)         5   left    quad      integer64,integer64 ; direct
infix   *(star)         5   left    single    single,single       ; direct
infix   *(star)         5   left    double    double,double       ; direct
infix   *(star)         5   left    quad      quad,quad           ; direct
infix   /(slash)        5   left    single    single,single       ; direct
infix   /(slash)        5   left    double    double,double       ; direct
infix   /(slash)        5   left    quad      quad,quad           ; direct
prefix  negative        6           integer   integer
prefix  negative        6           long      long
prefix  negative        6           integer64 integer64
prefix  negative        6           single    single
prefix  negative        6           double    double
prefix  negative        6           quad      quad
infix   ^(power)        7   left    single    single,single       ; direct
infix   ^(power)        7   left    double    double,double       ; direct
infix   ^(power)        7   left    quad      quad,quad           ; direct

# Parentheses don't have any real meaning, they only direct the parsing
generic oparen ; direct nosym
generic cparen ; direct nosym

# Numbers
# numint: 1234, numdec: 12.34, numexp: 12.3E4, numbase: &H1234
literal numint ; direct
literal numdec ; direct
literal numexp ; direct
literal numbase ; direct

# A string
literal string ; direct

# Type symbols
generic integer_sfx     ; direct nosym
generic long_sfx        ; direct nosym
generic integer64_sfx   ; direct nosym
generic offset_sfx      ; direct nosym

generic single_sfx      ; direct nosym
generic double_sfx      ; direct nosym
generic quad_sfx        ; direct nosym
generic string_sfx      ; direct nosym

# Basic language constructs
generic if
generic then
generic else
# end is special because it's both a command on its own and part of END IF.
# It gets special treatment in the statement parser.
generic end

generic do
generic loop
generic until
generic while
generic wend

generic for
generic to
generic step
generic next

generic select
generic case

# functions with return type none are subs
function _autodisplay   none
function input          none    list
function beep           none
function chr            string  integer
function _copypalette   none    long,long
function left           string  string,integer64
function print          none    list
function int            integer integer
function int            integer long
function int            integer integer64
function int            integer single
function int            integer double
function int            integer quad
function rgba           long    integer,integer?,integer?,integer?
